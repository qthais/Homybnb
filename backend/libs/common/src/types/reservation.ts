// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v6.30.1
// source: proto/reservation.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const reservationProtobufPackage = "reservation";

export interface CreateReservationDto {
  userId: string;
  listingId: number;
  startDate: string;
  endDate: string;
  totalPrice: number;
}

export interface ReservationDto {
  id: number;
  userId: string;
  listingId: number;
  startDate: string;
  endDate: string;
  totalPrice: number;
  createdAt: string;
}

export const RESERVATION_PACKAGE_NAME = "reservation";

export interface ReservationServiceClient {
  createReservation(request: CreateReservationDto): Observable<ReservationDto>;
}

export interface ReservationServiceController {
  createReservation(
    request: CreateReservationDto,
  ): Promise<ReservationDto> | Observable<ReservationDto> | ReservationDto;
}

export function ReservationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createReservation"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ReservationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ReservationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RESERVATION_SERVICE_NAME = "ReservationService";
