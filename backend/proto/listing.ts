// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v6.30.1
// source: proto/listing.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "listing";

export interface Empty {
}

export interface GetListingsByOptionDto {
  roomCount?: number | undefined;
  guestCount?: number | undefined;
  bathroomCount?: number | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  locationValue?: string | undefined;
  category?: string | undefined;
}

export interface UserIdDto {
  userId: string;
}

export interface ListingIdDto {
  listingId: number;
  include?: Include | undefined;
}

export interface Include {
  user?: boolean | undefined;
  reservations?: boolean | undefined;
}

export interface User {
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
  emailVerified?: string | undefined;
  image?: string | undefined;
  hashedPassword?: string | undefined;
  favoriteIds: number[];
  createdAt?:
    | string
    | undefined;
  /** repeated Account accounts = 10;   // User can have multiple accounts */
  updatedAt?: string | undefined;
}

export interface CreateListingDto {
  title: string;
  description: string;
  imageSrc: string;
  category: string;
  roomCount: number;
  bathroomCount: number;
  guestCount: number;
  locationValue: string;
  userId: string;
  price: number;
}

export interface ListingResponseDto {
  id: number;
  title: string;
  description: string;
  imageSrc: string;
  category: string;
  roomCount: number;
  bathroomCount: number;
  guestCount: number;
  locationValue: string;
  userId: string;
  price: number;
  createdAt?: string | undefined;
  user?: User | undefined;
  reservations: ReservationDto[];
}

export interface ReservationDto {
  id: number;
  userId: string;
  listingId: number;
  startDate: string;
  endDate: string;
  totalPrice: number;
  createdAt: string;
  listing?: ListingResponseDto | undefined;
}

export interface GetFavoritesDto {
  listingIds: number[];
}

export interface GetListingsResponseDto {
  listings: ListingResponseDto[];
}

export interface DeleteListingDto {
  listingId: number;
  userId: string;
}

export interface DeleteResponseDto {
  message: string;
}

export const LISTING_PACKAGE_NAME = "listing";

export interface ListingServiceClient {
  createListing(request: CreateListingDto): Observable<ListingResponseDto>;

  getListings(request: Empty): Observable<GetListingsResponseDto>;

  getListingsOfUser(request: UserIdDto): Observable<GetListingsResponseDto>;

  getListingById(request: ListingIdDto): Observable<ListingResponseDto>;

  getFavorites(request: GetFavoritesDto): Observable<GetListingsResponseDto>;

  deleteListing(request: DeleteListingDto): Observable<DeleteResponseDto>;

  getListingsByOption(request: GetListingsByOptionDto): Observable<GetListingsResponseDto>;
}

export interface ListingServiceController {
  createListing(
    request: CreateListingDto,
  ): Promise<ListingResponseDto> | Observable<ListingResponseDto> | ListingResponseDto;

  getListings(
    request: Empty,
  ): Promise<GetListingsResponseDto> | Observable<GetListingsResponseDto> | GetListingsResponseDto;

  getListingsOfUser(
    request: UserIdDto,
  ): Promise<GetListingsResponseDto> | Observable<GetListingsResponseDto> | GetListingsResponseDto;

  getListingById(
    request: ListingIdDto,
  ): Promise<ListingResponseDto> | Observable<ListingResponseDto> | ListingResponseDto;

  getFavorites(
    request: GetFavoritesDto,
  ): Promise<GetListingsResponseDto> | Observable<GetListingsResponseDto> | GetListingsResponseDto;

  deleteListing(
    request: DeleteListingDto,
  ): Promise<DeleteResponseDto> | Observable<DeleteResponseDto> | DeleteResponseDto;

  getListingsByOption(
    request: GetListingsByOptionDto,
  ): Promise<GetListingsResponseDto> | Observable<GetListingsResponseDto> | GetListingsResponseDto;
}

export function ListingServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createListing",
      "getListings",
      "getListingsOfUser",
      "getListingById",
      "getFavorites",
      "deleteListing",
      "getListingsByOption",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ListingService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ListingService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LISTING_SERVICE_NAME = "ListingService";
