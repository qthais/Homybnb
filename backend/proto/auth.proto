syntax = "proto3";
package auth;

service UserService {
    rpc CreateUser(CreateUserDto) returns (User);
    rpc FindAllUsers(Empty) returns (Users);
    rpc FindOneUser(FindOneUserDto) returns (User);
    rpc UpdateUser(UpdateUserDto) returns (User);
    rpc RemoveUser(RemoveUserDto) returns (User);
}

service AuthService{
    rpc Login(LoginDto) returns (LoginResponseDto);
    rpc Register(RegisterDto) returns (User);
    rpc LoginWithOauth(LoginOauthDto) returns (LoginResponseDto);
    rpc RefreshToken(Payload) returns (Tokens);
}

service AccountService {
    rpc FindAccountById(AccountIdRequest) returns (Account);
    rpc FindAccountsByUserId(UserIdRequest) returns (Accounts);
    rpc CreateAccount(CreateAccountDto) returns (Account);
    rpc DeleteAccount(AccountIdRequest) returns (Empty);
}

message LoginResponseDto{
    User user=1;
    Tokens tokens=2;
}

message Payload{
    string email=1;
    Sub sub=2;
}

message Sub{
    string userId=1;
}

message Tokens{
    string accessToken=1;
    string refreshToken=2;
    string expiresIn=3;
}

message LoginOauthDto{
    string email=1;
    string userId = 2;
    string type = 3;
    string provider = 4;
    string providerAccountId = 5;
    optional string refresh_token = 6;
    optional string access_token = 7;
    optional int32 expires_at = 8;
    optional string token_type = 9;
    optional string scope = 10;
    optional string id_token = 11;
    optional string session_state = 12;
    string image =13;
    string name=14;
}

// Empty message for methods that require no input
message Empty {}

// Pagination Request
// message PaginationDto {
//     int32 page = 1;
//     int32 limit = 2;
// }

// User Model
message User {
    optional string id = 1;
    optional string name = 2;
    optional string email = 3;
    optional string emailVerified = 4;
    optional string image = 5;
    optional string hashedPassword = 6;
    repeated int32 favoriteIds = 7;
    optional string createdAt = 8;
    optional string updatedAt = 9;
    // repeated Account accounts = 10;   // User can have multiple accounts
}

// DTOs for User
message CreateUserDto {
    string userId = 1;
    string type = 2;
    string provider = 3;
    string providerAccountId = 4;
    optional string refresh_token = 5;
    optional string access_token = 6;
    optional int32 expires_at = 7;
    optional string token_type = 8;
    optional string scope = 9;
    optional string id_token = 10;
    optional string session_state = 11;
    string email=12;
    string password=13;
    string name=14;
}

message UpdateUserDto {
    string id = 1;
    optional string name = 2;
    optional string email = 3;
    optional string password = 4;
    optional string image=5;
    repeated int32 favoriteIds=6;
    optional bool isEmptyFavoriteIds = 7;
    // repeated string favoriteIds = 5;
}

message FindOneUserDto {
    string email = 1;
}
message RemoveUserDto{
    string id=1;
}

message RegisterDto{
    string email=1;
    string name=2;
    string password=3;
}

message LoginDto{
    string email=1;
    string password=2;
}


message Users {
    repeated User users = 1;
}

// Account Model
message Account {
    string id = 1;
    string userId = 2;
    string type = 3;
    string provider = 4;
    string providerAccountId = 5;
    optional string refresh_token = 6;
    optional string access_token = 7;
    optional int32 expires_at = 8;
    optional string token_type = 9;
    optional string scope = 10;
    optional string id_token = 11;
    optional string session_state = 12;
}

// DTOs for Account
message CreateAccountDto {
    string userId = 1;
    string type = 2;
    string provider = 3;
    string providerAccountId = 4;
    optional string refresh_token = 5;
    optional string access_token = 6;
    optional int32 expires_at = 7;
    optional string token_type = 8;
    optional string scope = 9;
    optional string id_token = 10;
    optional string session_state = 11;
}

message AccountIdRequest {
    string id = 1;
}

message UserIdRequest {
    string userId = 1;
}

message Accounts {
    repeated Account accounts = 1;
}

// /protoc --plugin=protoc-gen-ts_proto=.\node_modules\.bin\protoc-gen-ts_proto.cmd --ts_proto_out=.\ --ts_proto_opt=nestJs=true .\proto\auth.proto